# Configure Kubernetes on all hosts
- hosts: all
  become: yes
  gather_facts: yes

  tasks:
    - name: Update and upgrade system packages
      shell: |
        apt-get update && apt-get upgrade -y

    - name: Enable overlayFS & VxLan pod communication
      shell: |
        modprobe overlay
        modprobe br_netfilter

    - name: Configure containerd
      shell: |
        cat <<EOF | tee /etc/modules-load.d/containerd.conf
        overlay
        br_netfilter
        EOF

    - name: Configure Kubernetes
      shell: |
        tee /etc/sysctl.d/kubernetes.conf <<EOF
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1
        EOF

    - name: Reload sysctl parameters
      command: sysctl --system

    - name: Download Docker GPG key and add Docker repository
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

    - name: Update and upgrade system packages again
      shell: |
        apt-get update && apt-get upgrade -y

    - name: Install containerd
      shell: |
        apt install -y containerd.io

    - name: Configure containerd
      shell: |
        mkdir -p /etc/containerd
        containerd config default | tee /etc/containerd/config.toml
        sed -i "s/SystemdCgroup = false/SystemdCgroup = true/" /etc/containerd/config.toml

    - name: Restart containerd
      shell: |
        systemctl restart containerd

    - name: Add Kubernetes repository
      shell: |
        apt-get install -y apt-transport-https ca-certificates curl
        mkdir -p -m 755 /etc/apt/keyrings
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list

    - name: Update and upgrade system packages again
      shell: |
        apt-get update && apt-get upgrade -y

    - name: Install Kubernetes components
      shell: |
        apt install -y kubelet kubeadm kubectl

    - name: Remove UFW
      shell: |
        apt-get remove ufw -y

    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/swap.img/d' /etc/fstab

    - name: Change hostname
      shell: |
             echo vm$(ip -4 addr show eth0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | sed 's/\.//g') > /etc/hostname
      become_user: root
    - name: Reboot a Linux machine 
      reboot:
        reboot_timeout: 1800

# Configure Master
- hosts: masters
  become: yes
  tasks:
    - name: Initialize the cluster
      shell: kubeadm init >> cluster_initialized.txt
      args:
        chdir: $HOME
        creates: cluster_initialized.txt

    - name: Create .kube directory
      file:
        path: /home/ocs-user/.kube
        state: directory
        mode: 0755
      become_user: ocs-user

    - name: Copy admin.conf
      copy:
        remote_src: yes
        src: /etc/kubernetes/admin.conf
        dest: /home/ocs-user/.kube/config
        owner: ocs-user

    - name: Install Weave Pod network
      shell: kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
      args:
        chdir: $HOME
      become_user: ocs-user

    - name: Install Helm
      become_user: root 
      shell: |
        curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | tee /usr/share/keyrings/helm.gpg > /dev/null
        apt-get install apt-transport-https --yes
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list
        apt-get update
        apt-get install helm

    - name: Install Metallb
      shell: |
        kubectl create ns metallb-system
        helm repo add metallb https://metallb.github.io/metallb
        mkdir -p -m 0755 $HOME/k8s/metallb
        cat <<EOF | tee $HOME/k8s/metallb/metallb-values.yaml
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
        name: first-pool
        namespace: metallb-system
        spec:
        addresses:
        - 10.15.1.100-10.15.1.110
        ---
        apiVersion: metallb.io/v1beta1
        kind: L2Advertisement
        metadata:
        name: advert
        namespace: metallb-system
        EOF
        kubectl apply -f $HOME/k8s/metallb/metallb-values.yaml
        helm install metallb metallb/metallb -n metallb-system
      become_user: ocs-user

    - name: Install Certmanager
      shell: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.0/cert-manager.yaml
      become_user: ocs-user

    - name: Get join token
      shell: kubeadm token create --print-join-command
      register: kubernetes_join_command
      become_user: ocs-user

    - name: Copy join command to local file.
      local_action:
        module: copy
        content: "{{ kubernetes_join_command.stdout }}"
        dest: /tmp/kubernetes_join_command
        mode: '0777'

    - name: Configure autocompletion
      shell: |
        echo 'source <(kubectl completion bash)' >>~/.bashrc
        echo 'alias k=kubectl' >>~/.bashrc
        echo 'complete -o default -F __start_kubectl k' >>~/.bashrc
      become_user: ocs-user

# Configure workers
- hosts: workers
  become: yes
  gather_facts: yes

  tasks:
    - name: Copy join command from Ansible host to the worker nodes
      copy:
        src: /tmp/kubernetes_join_command
        dest: /tmp/kubernetes_join_command
        mode: '0777'

    - name: Join the Worker nodes to the cluster
      command: sh /tmp/kubernetes_join_command
      register: joined_or_not
